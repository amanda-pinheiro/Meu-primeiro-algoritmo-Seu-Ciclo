from datetime import datetime
from datetime import timedelta
from time import sleep
from projeto_1.library import interface
from projeto_1.library import dados
from projeto_1.library import respostas

interface.cabe√ßalho('SEU CICLO')  # cabe√ßalho com o nome do programa.

while True:
    dados.nome('Para come√ßarmos, digite seu nome: ') # coleta o nome do usu√°rio.

    interface.apresenta√ß√£o() # apresenta√ß√£o do objetivo do programa personalizada com o nome do usu√°rio.

    # Coleta dos dados principais para o funcionamento do programa.
    data_√∫ltima = dados.formataData('Quando foi sua √∫ltima menstrua√ß√£o? [dd-mm-aaaa]: ')
    ciclo_completo = dados.ciclo('Quantos dias seu ciclo costuma ter? [de uma menstrua√ß√£o at√© a outra] ')
    per√≠odo_menstrual = dados.ciclo('Quantos dias voc√™ fica menstruada? ')

    # Organiza Vari√°veis - Datas(datetime)
    hoje = datetime.now()
    pr√≥ximo_ciclo = data_√∫ltima + timedelta(days=ciclo_completo)
    pr√≥ximo_ciclo_formatado = datetime.strftime(pr√≥ximo_ciclo, '%d-%m-%Y')

    # Organiza Vari√°veis - Contagem de dias(days ou int)
    dias_do_ciclo = hoje - data_√∫ltima

    # Organiza vari√°veis por per√≠odo.
    menstrua√ß√£o = per√≠odo_menstrual
    pr√©_ovulat√≥rio = ciclo_completo - 16
    ovula√ß√£o = ciclo_completo - 14
    f√©rtil = ciclo_completo - 12
    ppm = ciclo_completo - 7
    tpm = ciclo_completo

    # Tempo de carregamento antes de mostrar as respostas.
    print(interface.linha())
    interface.carregando()

    # Inicia as mensagens que ser√£o mostradas na tela.
    print(interface.linha())
    sleep(1)
    print(f'Voc√™ est√° no \033[35m{dias_do_ciclo.days}¬∫\033[m dia do seu ciclo.')
    print()

    # Condicionais que retornam respostas de acordo com as vari√°veis.
    if dias_do_ciclo.days < menstrua√ß√£o:
        respostas.menstrua√ß√£o()
    elif dias_do_ciclo.days < pr√©_ovulat√≥rio:
        respostas.pr√©_ovulat√≥rio()
    elif dias_do_ciclo.days < f√©rtil:
        respostas.f√©rtil()
    elif dias_do_ciclo.days < ppm:
        respostas.ppm()
    elif dias_do_ciclo.days < tpm:
        respostas.tpm()
    elif dias_do_ciclo.days > ciclo_completo:
        atraso = (ciclo_completo - dias_do_ciclo.days) * -1
        print(f'Atraso de {atraso} dias.')
        respostas.atraso()

    # Mensagens padr√£o ao t√©rmino da condi√ß√£o programada.
    print(f'\nSua pr√≥xima menstrua√ß√£o deve acontecer em: \033[35m{pr√≥ximo_ciclo_formatado}\033[m ')
    respostas.msg_final()

    # Menu para escolher continuar no programa ou sair.
    resposta = interface.menu(['Fazer de novo!', 'Sair'])
    if resposta > 2 or resposta < 1:
        interface.erro()
        resposta = interface.menu(['Fazer de novo!', 'Sair'])
    if resposta == 2:
        print('Saindo do sistema'.center(60))
        print()
        interface.carregando()
        print()
        print('At√© a pr√≥xima!üëã'.center(60))
        print(interface.linha())
        break
